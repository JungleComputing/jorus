package jorus.util;

import java.io.Serializable;

public class FeatureVector implements Serializable {

    // Generated by eclipse
    private static final long serialVersionUID = -5273998909448194335L;

    public final int invariants;

    public final int receptiveFields;

    public final double[] vector;

    public FeatureVector(int invariants, int receptiveFields) {
        this.invariants = invariants;
        this.receptiveFields = receptiveFields;
        vector = new double[invariants * receptiveFields * 2];
    }

    public boolean comparableTo(FeatureVector other) {
        if (other == null) {
            return false;
        }
        return invariants == other.invariants
                && receptiveFields == other.receptiveFields
                && vector.length == other.vector.length;

    }

    public double getScore(FeatureVector other) {
        if (!comparableTo(other)) {
            return -1;
        }

        double sErrorTreshold = 1.0;

        double[] dist = new double[receptiveFields * receptiveFields];
        for (int i = 0; i < receptiveFields; i++) {
            for (int j = 0; j < receptiveFields; j++) {
                double score = 0;
                for (int k = 0; k < invariants; k++) {
                    score += weibullDiff(vector[i * 2 * invariants + k * 2],
                            vector[i * 2 * invariants + k * 2 + 1],
                            other.vector[j * 2 * invariants + k * 2],
                            other.vector[j * 2 * invariants + k * 2 + 1]);
                }
                dist[i * receptiveFields + j] = score / invariants;
            }
        }

        double score = 1.0;
        for (int i = 0; i < receptiveFields; i++) {
            double mindist = sErrorTreshold;
            for (int j = 0; j < receptiveFields; j++) {
                double d = dist[i * receptiveFields + j];
                if (d < mindist) {
                    mindist = d;
                }
            }
            score *= sErrorTreshold - mindist;
        }

        double revscore = 1.0;
        for (int j = 0; j < receptiveFields; j++) {
            double mindist = sErrorTreshold;
            for (int i = 0; i < receptiveFields; i++) {
                double d = dist[i * receptiveFields + j];
                if (d < mindist) {
                    mindist = d;
                }
            }
            revscore *= sErrorTreshold - mindist;
        }
        return (score < revscore) ? (1.0 - score) : (1.0 - revscore);
    }

    private double weibullDiff(double gam1, double bet1, double gam2,
            double bet2) {
        double gam = 1.0 - (gam1 > gam2 ? gam2 / gam1 : gam1 / gam2);
        double bet = 1.0 - (bet1 > bet2 ? bet2 / bet1 : bet1 / bet2);
        return gam * bet;
    }
}
